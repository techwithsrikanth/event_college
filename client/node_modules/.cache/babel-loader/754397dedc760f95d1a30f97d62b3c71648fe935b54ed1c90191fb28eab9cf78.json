{"ast":null,"code":"const BASE_URL = \"http://localhost:5000\";\nexport const request = async (url, method, headers = {}, body = {}, isNotStringified = false) => {\n  let res;\n  let data;\n  switch (method) {\n    case 'GET':\n      res = await fetch(BASE_URL + url, {\n        headers\n      });\n      data = await res.json();\n      return data;\n    case 'POST':\n      // if we send form data, it is not content-type:application/json,\n      // hence the bonus param \n      if (isNotStringified) {\n        res = await fetch(BASE_URL + url, {\n          headers,\n          method,\n          body\n        });\n        data = await res.json();\n      } else {\n        res = await fetch(BASE_URL + url, {\n          headers,\n          method,\n          body: JSON.stringify({\n            ...body\n          })\n        });\n        data = await res.json();\n      }\n      return data;\n    case 'PUT':\n      res = await fetch(BASE_URL + url, {\n        headers,\n        method,\n        body: JSON.stringify(body)\n      });\n      data = await res.json();\n      return data;\n    case 'DELETE':\n      res = await fetch(BASE_URL + url, {\n        headers,\n        method\n      });\n      data = await res.json();\n      return data;\n    default:\n      return;\n  }\n};","map":{"version":3,"names":["BASE_URL","request","url","method","headers","body","isNotStringified","res","data","fetch","json","JSON","stringify"],"sources":["C:/Users/srika/OneDrive/Desktop/fest_website/client/src/util/fetchAPI.js"],"sourcesContent":["const BASE_URL = \"http://localhost:5000\"\r\n\r\nexport const request = async (url, method, headers = {}, body = {}, isNotStringified = false) => {\r\n    let res\r\n    let data\r\n    switch (method) {\r\n        case 'GET':\r\n            res = await fetch(BASE_URL + url, { headers })\r\n            data = await res.json()\r\n            return data\r\n\r\n        case 'POST':\r\n            // if we send form data, it is not content-type:application/json,\r\n            // hence the bonus param \r\n            if (isNotStringified) {\r\n                res = await fetch(BASE_URL + url, { headers, method, body })\r\n                data = await res.json()\r\n            } else {\r\n                res = await fetch(BASE_URL + url, { headers, method, body: JSON.stringify({ ...body }) })\r\n                data = await res.json()\r\n            }\r\n            return data\r\n\r\n        case 'PUT':\r\n            res = await fetch(BASE_URL + url, { headers, method, body: JSON.stringify(body) })\r\n            data = await res.json()\r\n            return data\r\n\r\n        case 'DELETE':\r\n            res = await fetch(BASE_URL + url, { headers, method })\r\n            data = await res.json()\r\n            return data\r\n        default:\r\n            return\r\n    }\r\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,gBAAgB,GAAG,KAAK,KAAK;EAC7F,IAAIC,GAAG;EACP,IAAIC,IAAI;EACR,QAAQL,MAAM;IACV,KAAK,KAAK;MACNI,GAAG,GAAG,MAAME,KAAK,CAACT,QAAQ,GAAGE,GAAG,EAAE;QAAEE;MAAQ,CAAC,CAAC;MAC9CI,IAAI,GAAG,MAAMD,GAAG,CAACG,IAAI,CAAC,CAAC;MACvB,OAAOF,IAAI;IAEf,KAAK,MAAM;MACP;MACA;MACA,IAAIF,gBAAgB,EAAE;QAClBC,GAAG,GAAG,MAAME,KAAK,CAACT,QAAQ,GAAGE,GAAG,EAAE;UAAEE,OAAO;UAAED,MAAM;UAAEE;QAAK,CAAC,CAAC;QAC5DG,IAAI,GAAG,MAAMD,GAAG,CAACG,IAAI,CAAC,CAAC;MAC3B,CAAC,MAAM;QACHH,GAAG,GAAG,MAAME,KAAK,CAACT,QAAQ,GAAGE,GAAG,EAAE;UAAEE,OAAO;UAAED,MAAM;UAAEE,IAAI,EAAEM,IAAI,CAACC,SAAS,CAAC;YAAE,GAAGP;UAAK,CAAC;QAAE,CAAC,CAAC;QACzFG,IAAI,GAAG,MAAMD,GAAG,CAACG,IAAI,CAAC,CAAC;MAC3B;MACA,OAAOF,IAAI;IAEf,KAAK,KAAK;MACND,GAAG,GAAG,MAAME,KAAK,CAACT,QAAQ,GAAGE,GAAG,EAAE;QAAEE,OAAO;QAAED,MAAM;QAAEE,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;MAAE,CAAC,CAAC;MAClFG,IAAI,GAAG,MAAMD,GAAG,CAACG,IAAI,CAAC,CAAC;MACvB,OAAOF,IAAI;IAEf,KAAK,QAAQ;MACTD,GAAG,GAAG,MAAME,KAAK,CAACT,QAAQ,GAAGE,GAAG,EAAE;QAAEE,OAAO;QAAED;MAAO,CAAC,CAAC;MACtDK,IAAI,GAAG,MAAMD,GAAG,CAACG,IAAI,CAAC,CAAC;MACvB,OAAOF,IAAI;IACf;MACI;EACR;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}