{"ast":null,"code":"import { store } from '../redux/store';\nconst BASE_URL = \"http://localhost:5000\";\n// Update the path to match your store configuration file\n\nexport const request = async (url, method, headers = {}, body = {}, isNotStringified = false) => {\n  try {\n    let res;\n    let data;\n    const userToken = store.getState().auth.token;\n    console.log('User Token:', userToken);\n    headers['Authorization'] = userToken;\n    switch (method) {\n      case 'GET':\n        res = await fetch(BASE_URL + url, {\n          headers\n        });\n        break;\n      case 'POST':\n        if (isNotStringified) {\n          res = await fetch(BASE_URL + url, {\n            headers,\n            method,\n            body\n          });\n        } else {\n          res = await fetch(BASE_URL + url, {\n            headers,\n            method,\n            body: JSON.stringify(body)\n          });\n        }\n        break;\n      case 'PUT':\n        res = await fetch(BASE_URL + url, {\n          headers,\n          method,\n          body: JSON.stringify(body)\n        });\n        break;\n      case 'DELETE':\n        res = await fetch(BASE_URL + url, {\n          headers,\n          method\n        });\n        break;\n      default:\n        break;\n    }\n    if (res.status !== 200 && res.status !== 201) {\n      console.error(`Error in ${method} request to ${BASE_URL + url}: ${res.status}`);\n      throw new Error('Server Error');\n    }\n    data = await res.json();\n    console.log(`Response data:`, data); // Add this line to log the response data\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw new Error('Network Error');\n  }\n};","map":{"version":3,"names":["store","BASE_URL","request","url","method","headers","body","isNotStringified","res","data","userToken","getState","auth","token","console","log","fetch","JSON","stringify","status","error","Error","json"],"sources":["C:/Users/srika/OneDrive/Desktop/fest_website/client/src/components/util/fetchAPI.js"],"sourcesContent":["import {store}  from '../redux/store';\r\n\r\nconst BASE_URL = \"http://localhost:5000\";\r\n // Update the path to match your store configuration file\r\n\r\nexport const request = async (url, method, headers = {}, body = {}, isNotStringified = false) => {\r\n  try {\r\n    let res;\r\n    let data;\r\n\r\n\r\n    const userToken = store.getState().auth.token;\r\n    console.log('User Token:', userToken);\r\n    headers['Authorization'] = userToken;\r\n\r\n    switch (method) {\r\n      case 'GET':\r\n        res = await fetch(BASE_URL + url, { headers });\r\n        break;\r\n\r\n      case 'POST':\r\n        if (isNotStringified) {\r\n          res = await fetch(BASE_URL + url, { headers, method, body });\r\n        } else {\r\n          res = await fetch(BASE_URL + url, { headers, method, body: JSON.stringify(body) });\r\n        }\r\n        break;\r\n\r\n      case 'PUT':\r\n        res = await fetch(BASE_URL + url, { headers, method, body: JSON.stringify(body) });\r\n        break;\r\n\r\n      case 'DELETE':\r\n        res = await fetch(BASE_URL + url, { headers, method });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (res.status !== 200 && res.status !== 201) {\r\n      console.error(`Error in ${method} request to ${BASE_URL + url}: ${res.status}`);\r\n      throw new Error('Server Error');\r\n    }\r\n\r\n    data = await res.json();\r\n    console.log(`Response data:`, data); // Add this line to log the response data\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    throw new Error('Network Error');\r\n  }\r\n};"],"mappings":"AAAA,SAAQA,KAAK,QAAQ,gBAAgB;AAErC,MAAMC,QAAQ,GAAG,uBAAuB;AACvC;;AAED,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,gBAAgB,GAAG,KAAK,KAAK;EAC/F,IAAI;IACF,IAAIC,GAAG;IACP,IAAIC,IAAI;IAGR,MAAMC,SAAS,GAAGV,KAAK,CAACW,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,KAAK;IAC7CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEL,SAAS,CAAC;IACrCL,OAAO,CAAC,eAAe,CAAC,GAAGK,SAAS;IAEpC,QAAQN,MAAM;MACZ,KAAK,KAAK;QACRI,GAAG,GAAG,MAAMQ,KAAK,CAACf,QAAQ,GAAGE,GAAG,EAAE;UAAEE;QAAQ,CAAC,CAAC;QAC9C;MAEF,KAAK,MAAM;QACT,IAAIE,gBAAgB,EAAE;UACpBC,GAAG,GAAG,MAAMQ,KAAK,CAACf,QAAQ,GAAGE,GAAG,EAAE;YAAEE,OAAO;YAAED,MAAM;YAAEE;UAAK,CAAC,CAAC;QAC9D,CAAC,MAAM;UACLE,GAAG,GAAG,MAAMQ,KAAK,CAACf,QAAQ,GAAGE,GAAG,EAAE;YAAEE,OAAO;YAAED,MAAM;YAAEE,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACZ,IAAI;UAAE,CAAC,CAAC;QACpF;QACA;MAEF,KAAK,KAAK;QACRE,GAAG,GAAG,MAAMQ,KAAK,CAACf,QAAQ,GAAGE,GAAG,EAAE;UAAEE,OAAO;UAAED,MAAM;UAAEE,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACZ,IAAI;QAAE,CAAC,CAAC;QAClF;MAEF,KAAK,QAAQ;QACXE,GAAG,GAAG,MAAMQ,KAAK,CAACf,QAAQ,GAAGE,GAAG,EAAE;UAAEE,OAAO;UAAED;QAAO,CAAC,CAAC;QACtD;MAEF;QACE;IACJ;IAEA,IAAII,GAAG,CAACW,MAAM,KAAK,GAAG,IAAIX,GAAG,CAACW,MAAM,KAAK,GAAG,EAAE;MAC5CL,OAAO,CAACM,KAAK,CAAE,YAAWhB,MAAO,eAAcH,QAAQ,GAAGE,GAAI,KAAIK,GAAG,CAACW,MAAO,EAAC,CAAC;MAC/E,MAAM,IAAIE,KAAK,CAAC,cAAc,CAAC;IACjC;IAEAZ,IAAI,GAAG,MAAMD,GAAG,CAACc,IAAI,CAAC,CAAC;IACvBR,OAAO,CAACC,GAAG,CAAE,gBAAe,EAAEN,IAAI,CAAC,CAAC,CAAC;IACrC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EAClC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}