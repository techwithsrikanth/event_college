{"ast":null,"code":"const BASE_URL = \"http://localhost:5000\";\nexport const request = async (url, method, headers = {}, body = {}, isNotStringified = false) => {\n  let res;\n  let data;\n\n  // Log the data before making the request\n  console.log(\"Request Data:\", body);\n  try {\n    let requestOptions = {\n      method: method,\n      headers: headers // Use the passed headers directly\n    };\n\n    // Check if it's a GET request, exclude the body\n    if (method === 'GET') {\n      res = await fetch(BASE_URL + url, requestOptions);\n    } else {\n      // For other request types, include the body\n      requestOptions.body = isNotStringified ? body : JSON.stringify(body);\n      res = await fetch(BASE_URL + url, requestOptions);\n    }\n    data = await res.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error.message);\n    return {\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["BASE_URL","request","url","method","headers","body","isNotStringified","res","data","console","log","requestOptions","fetch","JSON","stringify","json","error","message"],"sources":["C:/Users/srika/OneDrive/Desktop/fest_website/client/src/util/fetchAPI2.js"],"sourcesContent":["const BASE_URL = \"http://localhost:5000\";\r\n\r\nexport const request = async (url, method, headers = {}, body = {}, isNotStringified = false) => {\r\n    let res;\r\n    let data;\r\n\r\n    // Log the data before making the request\r\n    console.log(\"Request Data:\", body);\r\n\r\n    try {\r\n        let requestOptions = {\r\n            method: method,\r\n            headers: headers, // Use the passed headers directly\r\n        };\r\n\r\n        // Check if it's a GET request, exclude the body\r\n        if (method === 'GET') {\r\n            res = await fetch(BASE_URL + url, requestOptions);\r\n        } else {\r\n            // For other request types, include the body\r\n            requestOptions.body = isNotStringified ? body : JSON.stringify(body);\r\n            res = await fetch(BASE_URL + url, requestOptions);\r\n        }\r\n\r\n        data = await res.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error:', error.message);\r\n        return { error: error.message };\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,gBAAgB,GAAG,KAAK,KAAK;EAC7F,IAAIC,GAAG;EACP,IAAIC,IAAI;;EAER;EACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,IAAI,CAAC;EAElC,IAAI;IACA,IAAIM,cAAc,GAAG;MACjBR,MAAM,EAAEA,MAAM;MACdC,OAAO,EAAEA,OAAO,CAAE;IACtB,CAAC;;IAED;IACA,IAAID,MAAM,KAAK,KAAK,EAAE;MAClBI,GAAG,GAAG,MAAMK,KAAK,CAACZ,QAAQ,GAAGE,GAAG,EAAES,cAAc,CAAC;IACrD,CAAC,MAAM;MACH;MACAA,cAAc,CAACN,IAAI,GAAGC,gBAAgB,GAAGD,IAAI,GAAGQ,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC;MACpEE,GAAG,GAAG,MAAMK,KAAK,CAACZ,QAAQ,GAAGE,GAAG,EAAES,cAAc,CAAC;IACrD;IAEAH,IAAI,GAAG,MAAMD,GAAG,CAACQ,IAAI,CAAC,CAAC;IACvB,OAAOP,IAAI;EACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACC,OAAO,CAAC;IACtC,OAAO;MAAED,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EACnC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}